using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Threading;
using Filmster.Crawler;
using Filmster.Data;
using Filmster.Utilities;
using HtmlAgilityPack;

namespace Filmster.Crawlers
{
    internal class FilmstribenCrawler : Crawler
    {
        private const string _crawlstart = "http://www.filmstriben.dk/fjernleje/film/search.aspx";

        public void Start()
        {
            var page = 0;
            var resultContainsMovies = true;
            var moviesToLoad = new List<string>();

            while (resultContainsMovies)
                //while (page == 0)
            {
                Logger.LogVerbose("Fetching Filmstriben page " + page + ": " + string.Format(_crawlstart, page * 24));
                var postData = new NameValueCollection()
                                   {
                                       {"__EVENTTARGET", "ctl00$MainContent$PagingList$ctl02$pagingbutton"},
                                       {"__EVENTVALIDATION", "/wEWVwLaqeqoBALAh92ZAwK07NioCwKh0KL2CQLF4vqGDgKdjbzuBAKlwdeKCQK6wdeKCQK7wdeKCQK4wdeKCQK5wdeKCQK6wauJCQK+wdeKCQK/wdeKCQK8wdeKCQKtwdeKCQKiwdeKCQK6wa+JCQK6wbOJCQK6wZuJCQK0oqOVCgKroqOVCgKqoqOVCgKpoqOVCgKtoqOVCgLOrIy7DAKa1KHICgKBw4PnBAKkquSSDgLLkMaJCALu/9ikAgKV5rrSDQK4zZzJBwKPp9yIDgKyjr6mCAL27etSAp3UzckKAq/Q/NcHAuaRwLUDAsfO2aANAsbO0eELAsXOyeULAsTOwZ8KAsrO+YgHAqbF26ANAqXF0+ELAqTFy+ULAqvFw58KAqnF+4gHAvXA5aANAvTA3eILAvvA1eULAvrAzZ8KAvjAhYkHAtS336ANAtu31+ELAtq3z+ULAtm3x58KAs+3/4gHAruz0p8NArqzyuELArmzwuULArizup8KAq6z8ogHApqq1J8NApmqzOELApiqxOULAo+qvJ8KAo2q9IgHArnjyp8NArjjwuELAq/juuULAq7jsp8KAqzj6ogHApia3KANAo+a1OELAo6azOULAo2axJ8KApOa/IgHAr+I4KQNAr6I+N4LAr2I0OkLAryI6OIKAsKIgI0HAp7/2aQNAp3/8d4LAq3ItbYChRSDV7vFWQElwegwcxpZG/fuVL8="},
                                       {"__VIEWSTATE", ""}
                                   };
                var doc = PostDocument(postData, _crawlstart);
                page++;


                HtmlNodeCollection list = doc.DocumentNode.SelectNodes("//a[@class='title']");

                foreach (HtmlNode htmlNode in list)
                {
                    moviesToLoad.Add("http://www.voddler.com" + htmlNode.Attributes["href"].Value);                        
                }

                if (doc.DocumentNode.SelectSingleNode("//a[@class='goright inactive']") != null)
                {
                    resultContainsMovies = false;
                }
            }

            StartedThreads = moviesToLoad.Count;

            foreach (var movie in moviesToLoad)
            {
                ThreadPool.QueueUserWorkItem(LoadMovie, movie);
            }

            DoneEvent.WaitOne();
        }

        public void LoadMovie(object obj)
        {
            try
            {
                var repository = new FilmsterRepository();
                var movieUrl = (string)obj;

                var doc = GetDocument(movieUrl).DocumentNode;

                bool highDef = false;
                const int vendorId = 3;
                int releaseYear = 0;
                float price = 0;

                var title = doc.SelectSingleNode("//div[@id='screencycle_movieinfo']//h2").InnerText.Trim();
                var plot = doc.SelectSingleNode("//p[@id='plot']").InnerText.Trim();
                var coverUrl = doc.SelectSingleNode("//div[@id='moviecovercontainer']//img").Attributes["src"].Value;

                if (title.Contains(" (HD)"))
                {
                    highDef = true;
                    title = title.Replace(" (HD)", "");
                }

                int.TryParse(doc.SelectSingleNode("//div[(@class='movie_metadata_container')]//table/tr[position()=2]/td[position()=2]").InnerText.RemoveNonNumericChars(), out releaseYear);
                float.TryParse(
                    doc.SelectSingleNode("//div[@id='buttoncontainer']//span[@class='price']").InnerText.RemoveNonNumericChars(),
                    out price);

                ResolveRentalOption(repository, movieUrl, coverUrl, vendorId, title, plot, releaseYear, false, highDef, price);
                repository.Save();

                Logger.LogVerbose(title.Trim());


            }
            catch (Exception ex)
            {
                LogCrawlerError(ex);
            }

            if (Interlocked.Decrement(ref StartedThreads) == 0)
            {
                DoneEvent.Set();
            }

        }
    }
}